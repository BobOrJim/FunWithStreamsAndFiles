ToDos:




* Types i want to practice:
csv (sträng splitta på rader), sedan parsasv arje rad map comma. sträng mappas mha array mappning.
json
xml
txt
IFTMIN
IFSTA



https://docs.microsoft.com/en-us/dotnet/standard/io/
https://docs.microsoft.com/en-us/dotnet/standard/io/common-i-o-tasks



FileDirectoryClasses <-> StreamClasses <-> ReaderWriterClasses
* StreamClasses är abstrationer av strömar, kanske kan man visualisera som att FileDirectoryClasses är tank, stream är rör, ReaderWriterClasses är pump.
* Vanligt är dock att serialiera till en StringBuilder., och sedan skrivs stringBuildern till en fil mha någon FileDirectoryClasses



01: Here are some commonly used file and directory classes:

File - provides static methods for creating, copying, deleting, moving, and opening files, and helps create a FileStream object.

FileInfo - provides instance methods for creating, copying, deleting, moving, and opening files, and helps create a FileStream object.

Directory - provides static methods for creating, moving, and enumerating through directories and subdirectories.

DirectoryInfo - provides instance methods for creating, moving, and enumerating through directories and subdirectories.

Path - provides methods and properties for processing directory strings in a cross-platform manner.


02: Here are some commonly used stream classes:

FileStream – for reading and writing to a file.

IsolatedStorageFileStream – for reading and writing to a file in isolated storage.

MemoryStream – for reading and writing to memory as the backing store.

BufferedStream – for improving performance of read and write operations.

NetworkStream – for reading and writing over network sockets.

PipeStream – for reading and writing over anonymous and named pipes.

CryptoStream – for linking data streams to cryptographic transformations.


03: Here are some commonly used reader and writer classes:

BinaryReader and BinaryWriter – for reading and writing primitive data types as binary values.

StreamReader and StreamWriter – for reading and writing characters by using an encoding value to convert the characters to and from bytes.

StringReader and StringWriter – for reading and writing characters to and from strings.

TextReader and TextWriter – serve as the abstract base classes for other readers and writers that read and write characters and strings, 
but not binary data.


######################Spara till senare ######################################
04: The following classes are frequently used when compressing and decompressing files and streams:

ZipArchive – for creating and retrieving entries in the zip archive.

ZipArchiveEntry – for representing a compressed file.

ZipFile – for creating, extracting, and opening a compressed package.

ZipFileExtensions – for creating and extracting entries in a compressed package.

DeflateStream – for compressing and decompressing streams using the Deflate algorithm.

GZipStream – for compressing and decompressing streams in gzip data format.


